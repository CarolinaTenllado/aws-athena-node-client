'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const formatting_1 = require("pg-promise/lib/formatting");
var AthenaDataTypeEnum;
(function (AthenaDataTypeEnum) {
    AthenaDataTypeEnum["Integer"] = "integer";
    AthenaDataTypeEnum["Float"] = "float";
    AthenaDataTypeEnum["Double"] = "double";
    AthenaDataTypeEnum["Decimal"] = "decimal";
    AthenaDataTypeEnum["Char"] = "char";
    AthenaDataTypeEnum["Varchar"] = "varchar";
    AthenaDataTypeEnum["Boolean"] = "boolean";
    AthenaDataTypeEnum["Binary"] = "binary";
    AthenaDataTypeEnum["Date"] = "date";
    AthenaDataTypeEnum["Timestamp"] = "timestamp";
    AthenaDataTypeEnum["TimestampWithTz"] = "timestamp with time zone";
    AthenaDataTypeEnum["Array"] = "array";
    AthenaDataTypeEnum["Json"] = "json";
    AthenaDataTypeEnum["Map"] = "map";
    AthenaDataTypeEnum["Struct"] = "struct";
    AthenaDataTypeEnum["TinyInt"] = "tinyint";
    AthenaDataTypeEnum["SmallInt"] = "smallint";
    AthenaDataTypeEnum["BigInt"] = "bigint";
})(AthenaDataTypeEnum || (AthenaDataTypeEnum = {}));
class AthenaClient {
    constructor(config) {
        this.config = config;
        this.config.awsConfig.apiVersion = '2017-05-18';
        this.client = new aws_sdk_1.Athena(this.config.awsConfig);
    }
    executeQuery(query, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            query = formatting_1.formatQuery(query, parameters);
            const requestParams = {
                QueryExecutionContext: {
                    Database: this.config.database,
                },
                QueryString: query,
                ResultConfiguration: {
                    OutputLocation: this.config.bucketUri,
                },
            };
            if (this.config.workGroup != null) {
                requestParams.WorkGroup = this.config.workGroup;
            }
            const queryExecutionId = yield this.startQueryExecution(requestParams);
            yield this.waitUntilSucceedQuery(queryExecutionId);
            return yield this.getQueryResults(queryExecutionId);
        });
    }
    startQueryExecution(requestParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.client.startQueryExecution(requestParams, (err, data) => {
                    if (err != null) {
                        return reject(err);
                    }
                    return resolve(data.QueryExecutionId);
                });
            });
        });
    }
    getQueryResults(queryExecutionId) {
        const requestParams = {
            QueryExecutionId: queryExecutionId,
        };
        let columns;
        return new Promise((resolve, reject) => {
            this.client.getQueryResults(requestParams, (err, data) => {
                if (err != null) {
                    return reject(err);
                }
                columns = this.setColumnParsers(data);
                const results = this.parseRows(data.ResultSet.Rows, columns);
                resolve(results);
            });
        });
    }
    parseRows(rows, columns) {
        const results = [];
        for (let rowIndex = 1; rowIndex < rows.length; rowIndex++) {
            const row = rows[rowIndex];
            const result = {};
            for (let rowDataIndex = 0; rowDataIndex < row.Data.length; rowDataIndex++) {
                const rowData = row.Data[rowDataIndex];
                const column = columns[rowDataIndex];
                result[column.name] = column.parse(rowData.VarCharValue);
            }
            results.push(result);
        }
        return results;
    }
    setColumnParsers(data) {
        const columns = [];
        for (const columnInfo of data.ResultSet.ResultSetMetadata.ColumnInfo) {
            const column = new AthenaColumn();
            column.name = columnInfo.Name;
            switch (columnInfo.Type) {
                case AthenaDataTypeEnum.Integer:
                case AthenaDataTypeEnum.TinyInt:
                case AthenaDataTypeEnum.SmallInt:
                case AthenaDataTypeEnum.BigInt:
                case AthenaDataTypeEnum.Float:
                case AthenaDataTypeEnum.Double:
                case AthenaDataTypeEnum.Decimal:
                    column.parse = AthenaColumn.parseNumber;
                    break;
                case AthenaDataTypeEnum.Char:
                case AthenaDataTypeEnum.Varchar:
                    column.parse = AthenaColumn.parseString;
                    break;
                case AthenaDataTypeEnum.Boolean:
                    column.parse = AthenaColumn.parseBoolean;
                    break;
                case AthenaDataTypeEnum.Date:
                case AthenaDataTypeEnum.Timestamp:
                case AthenaDataTypeEnum.TimestampWithTz:
                    column.parse = AthenaColumn.parseDate;
                    break;
                case AthenaDataTypeEnum.Array:
                case AthenaDataTypeEnum.Json:
                    column.parse = AthenaColumn.parseArray;
                    break;
                case AthenaDataTypeEnum.Binary:
                case AthenaDataTypeEnum.Map:
                case AthenaDataTypeEnum.Struct:
                default:
                    throw new Error(`Column type '${columnInfo.Type}' not supported`);
            }
            columns.push(column);
        }
        return columns;
    }
    waitUntilSucceedQuery(queryExecutionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestParams = {
                QueryExecutionId: queryExecutionId,
            };
            return new Promise((resolve, reject) => {
                this.client.getQueryExecution(requestParams, (err, data) => __awaiter(this, void 0, void 0, function* () {
                    if (err != null) {
                        return reject(err);
                    }
                    switch (data.QueryExecution.Status.State) {
                        case 'SUCCEEDED':
                            resolve();
                            break;
                        case 'QUEUED':
                        case 'RUNNING':
                            setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                                yield this.waitUntilSucceedQuery(queryExecutionId);
                                resolve();
                            }), this.config.waitTime * 1000);
                            break;
                        case 'CANCELLED':
                            reject(new Error(`Query cancelled`));
                            break;
                        case 'FAILED':
                            reject(new Error(`Query failed`));
                            break;
                        default:
                            reject(new Error(`Query Status '${data.QueryExecution.Status.State}' not supported`));
                            break;
                    }
                }));
            });
        });
    }
}
exports.AthenaClient = AthenaClient;
class AthenaColumn {
    static parseNumber(value) {
        const result = Number(value);
        if (isNaN(result)) {
            throw new Error(`The value '${value} 'is not a number`);
        }
        return result;
    }
    static parseString(value) {
        return value;
    }
    static parseBoolean(value) {
        return (value === 'true'
            || value === 'TRUE'
            || value === 't'
            || value === 'T'
            || value === 'yes'
            || value === 'YES'
            || value === '1');
    }
    static parseDate(value) {
        return new Date(value);
    }
    static parseArray(value) {
        return JSON.parse(value);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
