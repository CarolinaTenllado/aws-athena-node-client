'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const formatting_1 = require("pg-promise/lib/formatting");
var AthenaDataTypeEnum;
(function (AthenaDataTypeEnum) {
    AthenaDataTypeEnum["Integer"] = "integer";
    AthenaDataTypeEnum["Float"] = "float";
    AthenaDataTypeEnum["Double"] = "double";
    AthenaDataTypeEnum["Decimal"] = "decimal";
    AthenaDataTypeEnum["Char"] = "char";
    AthenaDataTypeEnum["Varchar"] = "varchar";
    AthenaDataTypeEnum["Boolean"] = "boolean";
    AthenaDataTypeEnum["Binary"] = "binary";
    AthenaDataTypeEnum["Date"] = "date";
    AthenaDataTypeEnum["Timestamp"] = "timestamp";
    AthenaDataTypeEnum["TimestampWithTz"] = "timestamp with time zone";
    AthenaDataTypeEnum["Array"] = "array";
    AthenaDataTypeEnum["Json"] = "json";
    AthenaDataTypeEnum["Map"] = "map";
    AthenaDataTypeEnum["Struct"] = "struct";
    AthenaDataTypeEnum["TinyInt"] = "tinyint";
    AthenaDataTypeEnum["SmallInt"] = "smallint";
    AthenaDataTypeEnum["BigInt"] = "bigint";
})(AthenaDataTypeEnum || (AthenaDataTypeEnum = {}));
class AthenaClient {
    constructor(config) {
        this.config = config;
        this.config.awsConfig.apiVersion = '2017-05-18';
        this.client = new aws_sdk_1.Athena(this.config.awsConfig);
    }
    async executeQuery(query, parameters) {
        query = formatting_1.formatQuery(query, parameters);
        const requestParams = {
            QueryExecutionContext: {
                Database: this.config.database,
            },
            QueryString: query,
            ResultConfiguration: {
                OutputLocation: this.config.bucketUri,
            },
        };
        if (this.config.workGroup != null) {
            requestParams.WorkGroup = this.config.workGroup;
        }
        const queryExecutionId = await this.startQueryExecution(requestParams);
        await this.waitUntilSucceedQuery(queryExecutionId);
        return await this.getQueryResults(queryExecutionId);
    }
    async startQueryExecution(requestParams) {
        return new Promise((resolve, reject) => {
            this.client.startQueryExecution(requestParams, (err, data) => {
                if (err != null) {
                    return reject(err);
                }
                return resolve(data.QueryExecutionId);
            });
        });
    }
    getQueryResults(queryExecutionId, nextToken, previousResults) {
        const requestParams = {
            NextToken: nextToken,
            QueryExecutionId: queryExecutionId,
        };
        let columns;
        return new Promise((resolve, reject) => {
            this.client.getQueryResults(requestParams, async (err, data) => {
                if (err != null) {
                    return reject(err);
                }
                columns = this.setColumnParsers(data);
                const isFirstPage = (previousResults == null && nextToken == null);
                let results = this.parseRows(data.ResultSet.Rows, columns, isFirstPage);
                if (previousResults != null) {
                    results = previousResults.concat(results);
                }
                if (data.NextToken != null) {
                    results = await this.getQueryResults(queryExecutionId, data.NextToken, results);
                }
                resolve(results);
            });
        });
    }
    parseRows(rows, columns, isFirstPage = false) {
        const results = [];
        for (let rowIndex = (isFirstPage) ? 1 : 0; rowIndex < rows.length; rowIndex++) {
            const row = rows[rowIndex];
            const result = {};
            for (let rowDataIndex = 0; rowDataIndex < row.Data.length; rowDataIndex++) {
                const rowData = row.Data[rowDataIndex];
                const column = columns[rowDataIndex];
                result[column.name] = column.parse(rowData.VarCharValue);
            }
            results.push(result);
        }
        return results;
    }
    setColumnParsers(data) {
        const columns = [];
        for (const columnInfo of data.ResultSet.ResultSetMetadata.ColumnInfo) {
            const column = new AthenaColumn();
            column.name = columnInfo.Name;
            switch (columnInfo.Type) {
                case AthenaDataTypeEnum.Integer:
                case AthenaDataTypeEnum.TinyInt:
                case AthenaDataTypeEnum.SmallInt:
                case AthenaDataTypeEnum.BigInt:
                case AthenaDataTypeEnum.Float:
                case AthenaDataTypeEnum.Double:
                case AthenaDataTypeEnum.Decimal:
                    column.parse = AthenaColumn.parseNumber;
                    break;
                case AthenaDataTypeEnum.Char:
                case AthenaDataTypeEnum.Varchar:
                    column.parse = AthenaColumn.parseString;
                    break;
                case AthenaDataTypeEnum.Boolean:
                    column.parse = AthenaColumn.parseBoolean;
                    break;
                case AthenaDataTypeEnum.Date:
                case AthenaDataTypeEnum.Timestamp:
                case AthenaDataTypeEnum.TimestampWithTz:
                    column.parse = AthenaColumn.parseDate;
                    break;
                case AthenaDataTypeEnum.Array:
                case AthenaDataTypeEnum.Json:
                    column.parse = AthenaColumn.parseArray;
                    break;
                case AthenaDataTypeEnum.Binary:
                case AthenaDataTypeEnum.Map:
                case AthenaDataTypeEnum.Struct:
                default:
                    throw new Error(`Column type '${columnInfo.Type}' not supported`);
            }
            columns.push(column);
        }
        return columns;
    }
    async waitUntilSucceedQuery(queryExecutionId) {
        const requestParams = {
            QueryExecutionId: queryExecutionId,
        };
        return new Promise((resolve, reject) => {
            this.client.getQueryExecution(requestParams, async (err, data) => {
                if (err != null) {
                    return reject(err);
                }
                switch (data.QueryExecution.Status.State) {
                    case 'SUCCEEDED':
                        resolve();
                        break;
                    case 'QUEUED':
                    case 'RUNNING':
                        setTimeout(async () => {
                            try {
                                await this.waitUntilSucceedQuery(queryExecutionId);
                                resolve();
                            }
                            catch (e) {
                                reject(e);
                            }
                        }, this.config.waitTime * 1000);
                        break;
                    case 'CANCELLED':
                        reject(new Error(`Query cancelled`));
                        break;
                    case 'FAILED':
                        reject(new Error(`Query failed`));
                        break;
                    default:
                        reject(new Error(`Query Status '${data.QueryExecution.Status.State}' not supported`));
                        break;
                }
            });
        });
    }
}
exports.AthenaClient = AthenaClient;
class AthenaColumn {
    static parseNumber(value) {
        const result = Number(value);
        if (isNaN(result)) {
            throw new Error(`The value '${value} 'is not a number`);
        }
        return result;
    }
    static parseString(value) {
        return value;
    }
    static parseBoolean(value) {
        return (value === 'true'
            || value === 'TRUE'
            || value === 't'
            || value === 'T'
            || value === 'yes'
            || value === 'YES'
            || value === '1');
    }
    static parseDate(value) {
        return new Date(value);
    }
    static parseArray(value) {
        return JSON.parse(value);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
